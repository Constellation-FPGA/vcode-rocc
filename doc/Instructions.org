#+TITLE: VCODE RoCC Instructions
#+AUTHOR: Karl Hallsby

* RoCC Instructions
RoCC instructions are an extension provided by UC Berkeley's parameterizable Rocket-core and BOOM cores.
They take up four of the standard[fn:1] 32-bit encoding sets.
The list of opcode sets and their bit patters from ~[6:0]~ are shown below.
  1. /custom-0/
     ~[6:0]~ = ~0001011~
  2. /custom-1/
     ~[6:0]~ = ~0101011~
  3. /custom-2/ (Reserved for RV128I instructions)
     ~[6:0]~ = ~1011011~
  4. /custom-3/ (Reserved for RV128I instructions)
     ~[6:0]~ = ~1111011~
By default, you will always have /custom-0/ and /custom-1/ available to you.
/custom-2/ and /custom-3/ are only available if RV128I instructions are *not* implemented.

** Encoding
RoCC instruction use the standard 32-bit encoding, but change some of the fields and their values.
| Bit Index    | 31-25         | 24-20 | 19-15 | 14 |  13 |  12 | 11-7 | 6-0              |
| Use          | funct7        | rs2   | rs1   | xd | xs1 | xs2 | rd   | opcode           |
| RoCC Meaning | roccinst[6:0] | src2  | src1  |    |     |     | dest | /custom-0/1/2/3/ |
Thus, we have $2^7$ possible instructions we can send to an accelerator.

If ~xs1 == 0~ and ~xs2 == 1~, the main core *cannot* decode the instruction!

** Communication
*** Main Processor to RoCC Coprocessor
When a RoCC instruction is passed through the main core to the coprocessor, several fields are passed over the RoCCIO bus (a ~DecoupledIO~ bus/queue).
  1. A portion of the original instruction.
     Namely, bit indices ~[32:7]~ are passed.
  2. The *contents* of ~rs1~, if ~xs1 == 1~.
  3. The *contents* of ~rs2~, if ~xs2 == 1~.
  4. Some ready/valid synchronization bits.

If any of the ~x~ bits are set to ~0~, then the register address provided refers to a RoCC-internal register [[https://webthesis.biblio.polito.it/6589/1/tesi.pdf][design programming riscv coprocessor]].

*** RoCC Coprocessor to Main Processor
When a RoCC instruction is informed that it must return data (by having ~xd != 0~), then the coprocessor will send a message back over a separate ~DecoupledIO~ queue.
  1. The register number to write the result to.
     This information was provided with the instruction that originally started the computation, ~rd~.
     /NOTE/: This *MUST* match the register sent in the instruction sent to the accelerator *at the time of sending the response back*!
     If you the register *at the time of response* does not match the one sent to the accelerator, it is undefined behavior.
     The verilator simulator will continue running, as the main processor is still waiting for a valid response.
  2. The contents to save *into* ~rd~.
  3. Some ready/valid synchronization bits.

All of this information *must* be asserted at the time of returning a value to the main processor.
For example, if you send a response when back to the main processor, but the ~rd~ bits do not match the ones sent to the accelerator, the simulator will hang.

*** Blocking & Nonblocking Operations
Instructions issued to the coprocessor can either block or not block the main core.
How this is decided depends on the values provided in the instruction.
  * If ~xd == 1~, but the destination register is ~x0~ (the zero register) the processor will *not* wait for the coprocessor.
  * If ~xd~ is ~0~, the processor will *not* wait for the coprocessor.

*** Additional Communications
The RoCC accelerator can interrupt the main processor.
Interrupts behave much the same way as sending a response back to the main processor.
~rd~ needs to be set to the value sent by the command and ~valid~ needs to be asserted *at the same time* as the ~interrupt~ line is high!

The RoCC accelerator can inform the main processor it is busy by setting the ~busy~ line high.
The ~busy~ line is intended to inform the main processor when the accelerator has outstanding memory operations.

* VCODE Instruction Encoding
In all of the encodings below, I will always specify the ~funct7~ field.
Usually the context of the operation will determine which of the ~x~ flags to set, and the actual register number is variable.
If the value for either the ~x~ bits or the register number *must* be set to a certain value, it will be said.

** Control Operations
These operations are ones that are required to make the hardware work, but do *not* perform a computation.
Namely, these are instructions that have *no VCODE equivalent*.
| Chisel Symbol | ~funct7~ Encoding (Binary) | ~funct7~ Encoding (Hex) |
|---------------+----------------------------+-------------------------|
|               |                            |                       0 |
#+TBLFM: $3='(format "%x" (string-to-number $2 2))

** Binary Operations
The binary operations require pointers to the two vectors be passed, and the instruction determines the operation to perform.
| VCODE Operation | Chisel Symbol | ~funct7~ Encoding (Binary) | ~funct7~ Encoding (Hex) |
|-----------------+---------------+----------------------------+-------------------------|
| ~+~             | ~PLUS_INT~    |                    0000001 |                       1 |
|                 |               |                    0101011 |                      2b |
|                 |               |                            |                       0 |
|                 |               |                            |                       0 |
#+TBLFM: $4='(format "%x" (string-to-number $3 2))

** Vector Operations
| VCODE Operation | Chisel Symbol   | ~funct7~ Encoding (Binary) | ~funct7~ Encoding (Hex) |
|-----------------+-----------------+----------------------------+-------------------------|
| ~+_SCAN~        | ~PLUS_SCAN_INT~ | ???????                    |                       0 |
#+TBLFM: $4='(format "%x" (string-to-number $3 2))

** Using the Instructions
When writing the instruction in C code, use volatile inline assembly (~asm volatile ("insn")~ or ~__asm__ __volatile__ ("insn")~)
The disassembled instruction follows the format shown below, where ~funct7~ is written in hexadecimal.
#+begin_src asm
customX rd, rs1, rs2, funct7
#+end_src

When writing these yourself, manually, you should make use of GAS's built-in support for building instructions out of bytes.
See the info manual (as)RISC-V-Formats for how this works.
#+begin_src c
/* .insn r CUSTOM_X, x_flags, funct7, rd, rs1, rs2 */
__asm__ __volatile__ (
    ".insn r CUSTOM_" #X ", %3, %4, %0, %1, %2\n\t"
    : "=r" (rd)
    : "r" (rs1), "r" (rs2),
      "i" (ROCC_XD | ROCC_XS1 | ROCC_XS2), "i" (funct));
#+end_src
For more examples of how this should be done, see [[https://github.com/ucb-bar/sha3/blob/master/software/tests/src/rocc.h][SHA3 RoCC Header]].

* Footnotes
[fn:1]RISC-V supports instructions of other sizes as well.
See the "Expanded Instruction-Length Encoding" section in the unprivileged RISC-V specification.
